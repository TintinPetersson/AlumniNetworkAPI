// <auto-generated />
using System;
using AlumniNetworkAPI.Models.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlumniNetworkAPI.Migrations
{
    [DbContext(typeof(AlumniNetworkDbContext))]
    partial class AlumniNetworkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowGuests")
                        .HasColumnType("bit");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BannerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowGuests = true,
                            BannerImage = "machinelearning.jpg",
                            Description = "Join us for an online workshop on the basics of machine learning. Learn about various algorithms and techniques used in machine learning.",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Introduction to Machine Learning",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AllowGuests = true,
                            BannerImage = "networking.jpg",
                            Description = "Join us for an evening of networking and socializing with fellow alumni. Make new connections, catch up with old friends, and expand your professional network.",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alumni Networking Mixer",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AllowGuests = true,
                            BannerImage = "communityservice.jpg",
                            Description = "Join us for a community service project to give back to the community. Help us clean up a local park and make it a better place for everyone.",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Community Service Project",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AllowGuests = true,
                            BannerImage = "homecoming.jpg",
                            Description = "Join us for the annual alumni homecoming event. Reconnect with old friends, meet new ones, and celebrate the university's legacy.",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alumni Homecoming 2023",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AllowGuests = false,
                            BannerImage = "careerfair.jpg",
                            Description = "Looking for new job opportunities? Join us for the annual career fair, where you can network with employers and learn about job openings.",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Career Fair 2023",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A group for alumni who are interested in sports and fitness.",
                            IsPrivate = true,
                            Name = "Alumni Sports Club"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A group for alumni who are interested in business networking and entrepreneurship.",
                            IsPrivate = false,
                            Name = "Business Networking Group"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A group for alumni who studied engineering at the university.",
                            IsPrivate = false,
                            Name = "Engineering Alumni Group"
                        },
                        new
                        {
                            Id = 4,
                            Description = "An association for all alumni of the law school.",
                            IsPrivate = false,
                            Name = "Law School Alumni Association"
                        },
                        new
                        {
                            Id = 5,
                            Description = "An association for all alumni of the medical school.",
                            IsPrivate = false,
                            Name = "Medical Alumni Association"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A group for alumni who love to read and discuss books.",
                            IsPrivate = true,
                            Name = "Alumni Book Club"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A group for alumni who love to travel and explore new places.",
                            IsPrivate = true,
                            Name = "Alumni Travel Group"
                        });
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("RecieverId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RecieverId");

                    b.HasIndex("TopicId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Body = "As an electrical engineering major, I have learned a lot during my time in college. Here are some tips for success: 1. Stay organized and manage your time well. 2. Take advantage of networking opportunities. 3. Get hands-on experience through internships or research. 4. Stay up-to-date with the latest technologies and trends. Good luck!",
                            EventId = 1,
                            GroupId = 1,
                            LastUpdated = new DateTime(2023, 3, 25, 16, 36, 30, 699, DateTimeKind.Local).AddTicks(3009),
                            Title = "Tips for Electrical Engineering Students",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Body = "If you're planning to take the bar exam, it's important to start preparing early. Here are some tips: 1. Create a study schedule and stick to it. 2. Take practice exams to get familiar with the format and types of questions. 3. Join a study group to stay motivated and get support. 4. Take care of yourself and manage your stress. You can do it!",
                            EventId = 2,
                            GroupId = 2,
                            LastUpdated = new DateTime(2023, 3, 25, 16, 36, 30, 699, DateTimeKind.Local).AddTicks(3044),
                            Title = "Preparing for the Bar Exam",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Body = "Starting a small business can be challenging, but also very rewarding. Here are some tips to help you get started: 1. Conduct market research to identify a need for your product or service. 2. Create a business plan and set clear goals. 3. Secure funding and resources. 4. Build a strong team and culture. Good luck on your entrepreneurial journey!",
                            EventId = 3,
                            GroupId = 3,
                            LastUpdated = new DateTime(2023, 3, 25, 16, 36, 30, 699, DateTimeKind.Local).AddTicks(3047),
                            Title = "Tips for Starting a Small Business",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Body = "As a medical resident, I have had many challenges and opportunities for growth. Here are some things I have learned: 1. Time management is key. 2. Communication skills are critical. 3. Self-care is important to avoid burnout. 4. Learning is a lifelong process. Best of luck to all medical residents!",
                            EventId = 1,
                            GroupId = 4,
                            LastUpdated = new DateTime(2023, 3, 25, 16, 36, 30, 699, DateTimeKind.Local).AddTicks(3049),
                            Title = "My Experience as a Medical Resident",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Body = "STEM education is crucial for the future of our society and economy. Here are some reasons why: 1. STEM careers are in high demand and offer high salaries. 2. STEM skills are needed for innovation and problem-solving. 3. STEM education can promote diversity and social equality. Let's encourage more young people to pursue STEM education!",
                            EventId = 4,
                            GroupId = 1,
                            LastUpdated = new DateTime(2023, 3, 25, 16, 36, 30, 699, DateTimeKind.Local).AddTicks(3052),
                            Title = "The Importance of STEM Education",
                            TopicId = 1
                        });
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Topics related to engineering, including mechanical, electrical, civil, and chemical engineering.",
                            Name = "Engineering"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Topics related to law, including civil law, criminal law, international law, and human rights.",
                            Name = "Law"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Topics related to business, including accounting, finance, marketing, and management.",
                            Name = "Business"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Topics related to medicine, including anatomy, physiology, pharmacology, and pathology.",
                            Name = "Medicine"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Topics related to education, including teaching methods, curriculum design, educational psychology, and special education.",
                            Name = "Education"
                        });
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FunFact")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("KeycloakId")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Software engineer by profession. Love to play football in free time.",
                            FunFact = "I can solve a Rubik's cube in under a minute.",
                            KeycloakId = "7a2a4108-21b7-4a7b-9e15-415262ef547d",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Working",
                            Username = "John"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Marketing professional who loves to read and travel.",
                            FunFact = "I have visited 10 countries in the last year.",
                            KeycloakId = "f428f142-cae0-4429-b846-991c67fc4d4f",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Working",
                            Username = "Jane"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Computer science major at Chalmers University. Enjoys playing video games and watching sci-fi movies.",
                            FunFact = "I have won several programming competitions.",
                            KeycloakId = "5da8c3d6-3edc-4ff4-9f80-d75a35ca470c",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Student",
                            Username = "Alice"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Studying psychology at Yale University. Passionate about music and plays the guitar.",
                            FunFact = "I can play the guitar upside down and backwards.",
                            KeycloakId = "82070311-b1ca-4828-bb68-9a62b957361e",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Student",
                            Username = "Bob"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Accountant by profession. Loves to hike and explore nature.",
                            FunFact = "I have climbed Mount Kilimanjaro.",
                            KeycloakId = "4a7663b6-6940-46c3-86ef-659f014ae8d1",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Working",
                            Username = "Sarah"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Sales executive who enjoys playing basketball and cooking.",
                            FunFact = "I have cooked for a Michelin-starred chef.",
                            KeycloakId = "b6781ded-8de2-416f-b03b-0fade74353fe",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Working",
                            Username = "David"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Studying medicine at LMN University. Enjoys practicing yoga and volunteering at a local hospital.",
                            FunFact = "I can hold a handstand for over a minute.",
                            KeycloakId = "1cf5b92c-a998-41e0-9ad2-d7c2ff1c2673",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Student",
                            Username = "Emily"
                        },
                        new
                        {
                            Id = 8,
                            Bio = "Studying finance at PQR College. Enjoys playing tennis and watching documentaries.",
                            FunFact = "I have won several tennis tournaments in my city.",
                            KeycloakId = "cd42f358-b591-4f7b-a6d3-4bd8e0b840af",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Student",
                            Username = "Chris"
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Graphic designer by profession. Enjoys painting and hiking on weekends.",
                            FunFact = "I have exhibited my paintings in several art galleries.",
                            KeycloakId = "f0b6c858-24bc-4d03-b89e-6269f8c43241",
                            Picture = "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",
                            Status = "Working",
                            Username = "Avery"
                        });
                });

            modelBuilder.Entity("EventGroup", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventGroup");

                    b.HasData(
                        new
                        {
                            GroupsId = 1,
                            EventsId = 1
                        },
                        new
                        {
                            GroupsId = 2,
                            EventsId = 2
                        },
                        new
                        {
                            GroupsId = 3,
                            EventsId = 3
                        },
                        new
                        {
                            GroupsId = 3,
                            EventsId = 2
                        },
                        new
                        {
                            GroupsId = 5,
                            EventsId = 4
                        },
                        new
                        {
                            GroupsId = 6,
                            EventsId = 5
                        });
                });

            modelBuilder.Entity("EventTopic", b =>
                {
                    b.Property<int>("TopicsId")
                        .HasColumnType("int");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.HasKey("TopicsId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventTopic");

                    b.HasData(
                        new
                        {
                            TopicsId = 2,
                            EventsId = 1
                        },
                        new
                        {
                            TopicsId = 5,
                            EventsId = 2
                        },
                        new
                        {
                            TopicsId = 3,
                            EventsId = 3
                        },
                        new
                        {
                            TopicsId = 4,
                            EventsId = 4
                        },
                        new
                        {
                            TopicsId = 2,
                            EventsId = 5
                        },
                        new
                        {
                            TopicsId = 4,
                            EventsId = 5
                        });
                });

            modelBuilder.Entity("EventUserInvitation", b =>
                {
                    b.Property<int>("InvitedUsersId")
                        .HasColumnType("int");

                    b.Property<int>("UnrespondedEventsId")
                        .HasColumnType("int");

                    b.HasKey("InvitedUsersId", "UnrespondedEventsId");

                    b.HasIndex("UnrespondedEventsId");

                    b.ToTable("EventUserInvitation");
                });

            modelBuilder.Entity("GroupMember", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMember");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            UserId = 1
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 3
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 4
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 6
                        },
                        new
                        {
                            GroupId = 1,
                            UserId = 5
                        },
                        new
                        {
                            GroupId = 2,
                            UserId = 4
                        },
                        new
                        {
                            GroupId = 2,
                            UserId = 8
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 6
                        },
                        new
                        {
                            GroupId = 3,
                            UserId = 5
                        },
                        new
                        {
                            GroupId = 4,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 5,
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 5,
                            UserId = 4
                        },
                        new
                        {
                            GroupId = 6,
                            UserId = 6
                        },
                        new
                        {
                            GroupId = 6,
                            UserId = 3
                        },
                        new
                        {
                            GroupId = 7,
                            UserId = 8
                        },
                        new
                        {
                            GroupId = 7,
                            UserId = 9
                        });
                });

            modelBuilder.Entity("RSVP", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("RSVP");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            EventId = 1
                        },
                        new
                        {
                            UserId = 5,
                            EventId = 1
                        },
                        new
                        {
                            UserId = 4,
                            EventId = 1
                        },
                        new
                        {
                            UserId = 2,
                            EventId = 2
                        },
                        new
                        {
                            UserId = 3,
                            EventId = 2
                        },
                        new
                        {
                            UserId = 4,
                            EventId = 2
                        },
                        new
                        {
                            UserId = 5,
                            EventId = 3
                        },
                        new
                        {
                            UserId = 1,
                            EventId = 3
                        },
                        new
                        {
                            UserId = 2,
                            EventId = 3
                        });
                });

            modelBuilder.Entity("TopicUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicUser");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TopicId = 1
                        },
                        new
                        {
                            UserId = 5,
                            TopicId = 1
                        },
                        new
                        {
                            UserId = 4,
                            TopicId = 1
                        },
                        new
                        {
                            UserId = 2,
                            TopicId = 2
                        },
                        new
                        {
                            UserId = 4,
                            TopicId = 2
                        },
                        new
                        {
                            UserId = 9,
                            TopicId = 3
                        },
                        new
                        {
                            UserId = 5,
                            TopicId = 3
                        },
                        new
                        {
                            UserId = 7,
                            TopicId = 4
                        },
                        new
                        {
                            UserId = 8,
                            TopicId = 5
                        });
                });

            modelBuilder.Entity("UserEvents", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            EventId = 1
                        },
                        new
                        {
                            UserId = 5,
                            EventId = 1
                        },
                        new
                        {
                            UserId = 4,
                            EventId = 1
                        },
                        new
                        {
                            UserId = 2,
                            EventId = 2
                        },
                        new
                        {
                            UserId = 3,
                            EventId = 2
                        },
                        new
                        {
                            UserId = 4,
                            EventId = 2
                        },
                        new
                        {
                            UserId = 5,
                            EventId = 3
                        },
                        new
                        {
                            UserId = 1,
                            EventId = 3
                        },
                        new
                        {
                            UserId = 2,
                            EventId = 3
                        },
                        new
                        {
                            UserId = 3,
                            EventId = 4
                        },
                        new
                        {
                            UserId = 6,
                            EventId = 4
                        },
                        new
                        {
                            UserId = 7,
                            EventId = 4
                        },
                        new
                        {
                            UserId = 8,
                            EventId = 5
                        },
                        new
                        {
                            UserId = 9,
                            EventId = 5
                        },
                        new
                        {
                            UserId = 1,
                            EventId = 5
                        });
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Event", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", "Author")
                        .WithMany("AuthoredEvents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Post", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", "Author")
                        .WithMany("AuthoredPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.Event", "Event")
                        .WithMany("Posts")
                        .HasForeignKey("EventId");

                    b.HasOne("AlumniNetworkAPI.Models.Domain.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId");

                    b.HasOne("AlumniNetworkAPI.Models.Domain.Post", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", "Reciever")
                        .WithMany("RecievedPosts")
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AlumniNetworkAPI.Models.Domain.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId");

                    b.Navigation("Author");

                    b.Navigation("Event");

                    b.Navigation("Group");

                    b.Navigation("Parent");

                    b.Navigation("Reciever");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EventGroup", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventTopic", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUserInvitation", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("InvitedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("UnrespondedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupMember", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RSVP", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TopicUser", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserEvents", b =>
                {
                    b.HasOne("AlumniNetworkAPI.Models.Domain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniNetworkAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Event", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Group", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Post", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.Topic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("AlumniNetworkAPI.Models.Domain.User", b =>
                {
                    b.Navigation("AuthoredEvents");

                    b.Navigation("AuthoredPosts");

                    b.Navigation("RecievedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
